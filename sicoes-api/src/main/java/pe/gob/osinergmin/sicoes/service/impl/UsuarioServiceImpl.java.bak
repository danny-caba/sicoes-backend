package pe.gob.osinergmin.sicoes.service.impl;


import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringUtils;
import org.codehaus.jackson.map.ObjectMapper;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.env.Environment;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import gob.osinergmin.gfgn.seguridad.common.dto.UsuarioBeanDTO;
import gob.osinergmin.gfgn.seguridad.common.util.SecureCrypto;
import gob.osinergmin.sisseg.servicio.cliente.ClienteSissegConfig;
import gob.osinergmin.sisseg.servicio.cliente.ClienteSissegConfigParams;
import gob.osinergmin.sisseg.servicio.cliente.security.SissegAuthenticationProvider;
import gob.osinergmin.sisseg.servicio.cliente.security.SissegAuthenticationToken;
import pe.gob.osinergmin.sicoes.consumer.SigedApiConsumer;
import pe.gob.osinergmin.sicoes.model.Asignacion;
import pe.gob.osinergmin.sicoes.model.BaseModel;
import pe.gob.osinergmin.sicoes.model.ConfiguracionBandeja;
import pe.gob.osinergmin.sicoes.model.ListadoDetalle;
import pe.gob.osinergmin.sicoes.model.Notificacion;
import pe.gob.osinergmin.sicoes.model.Opcion;
import pe.gob.osinergmin.sicoes.model.Rol;
import pe.gob.osinergmin.sicoes.model.Token;
import pe.gob.osinergmin.sicoes.model.Usuario;
import pe.gob.osinergmin.sicoes.model.UsuarioReasignacion;
import pe.gob.osinergmin.sicoes.model.UsuarioRol;
import pe.gob.osinergmin.sicoes.model.UsuarioRolConfiguracion;
import pe.gob.osinergmin.sicoes.model.dto.PerfilDTO;
import pe.gob.osinergmin.sicoes.model.dto.ReasignacionDTO;
import pe.gob.osinergmin.sicoes.model.dto.ResponseUsuarioSigedDTO;
import pe.gob.osinergmin.sicoes.model.dto.UsernameDTO;
import pe.gob.osinergmin.sicoes.model.dto.UsuarioDTO;
import pe.gob.osinergmin.sicoes.repository.AsignacionDao;
import pe.gob.osinergmin.sicoes.repository.ListadoDetalleDao;
import pe.gob.osinergmin.sicoes.repository.RolDao;
import pe.gob.osinergmin.sicoes.repository.TokenDao;
import pe.gob.osinergmin.sicoes.repository.UsuarioDao;
import pe.gob.osinergmin.sicoes.repository.UsuarioEvaluacionDao;
import pe.gob.osinergmin.sicoes.repository.UsuarioReasignacionDao;
import pe.gob.osinergmin.sicoes.service.BitacoraService;
import pe.gob.osinergmin.sicoes.service.ListadoDetalleService;
import pe.gob.osinergmin.sicoes.service.NotificacionService;
import pe.gob.osinergmin.sicoes.service.OpcionService;
import pe.gob.osinergmin.sicoes.service.RolService;
import pe.gob.osinergmin.sicoes.service.TokenService;
import pe.gob.osinergmin.sicoes.service.UsuarioRolService;
import pe.gob.osinergmin.sicoes.service.UsuarioService;
import pe.gob.osinergmin.sicoes.util.AuditoriaUtil;
import pe.gob.osinergmin.sicoes.util.Constantes;
import pe.gob.osinergmin.sicoes.util.Contexto;
import pe.gob.osinergmin.sicoes.util.DateUtil;
import pe.gob.osinergmin.sicoes.util.ValidacionException;
import pe.gob.osinergmin.sicoes.util.bean.siged.ResponseUserListDto;
import pe.gob.osinergmin.sicoes.util.vo.OpcionDTO;

@Service
public class UsuarioServiceImpl extends BaseService implements UsuarioService {

	private Logger logger = LogManager.getLogger(UsuarioService.class);

	@Autowired
	private UsuarioDao usuarioDao;
	
	@Autowired
	private TokenDao tokenDao;
	
	@Autowired
	private ListadoDetalleDao listadoDetalleDao;
	
	@Autowired
	private RolDao rolDao;
	
	@Autowired
	private AsignacionDao asignacionDao;
	
	@Autowired
	private UsuarioEvaluacionDao usuarioEvaluacionDao;
	
	@Autowired
	private UsuarioReasignacionDao usuarioReasignacionDao;
	
	@Autowired
	private ListadoDetalleService listadoDetalleService;
	
	@Autowired
	private TokenService tokenService;
	
	@Autowired
	private NotificacionService notificacionService;
	
	@Autowired
	private RolService rolService; 
	
	@Autowired
	private OpcionService opcionService;
	
	@Autowired
	private UsuarioRolService usuarioRolService;
	
	@Autowired
	private BitacoraService bitacoraService;
	 
	@Autowired
	private SigedApiConsumer sigedApiConsumer;
	
	@Value("${security.enc.key}")
	private String KEY_CRYPT;
	
	
	@Autowired
	private Environment env;

	
	private SissegAuthenticationProvider sissegAuthenticationProvider;
	
	final static String PASSWORD_REGEX =
    		"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=.;:,])(?=\\S+$).{6,}$";
	final static   Pattern PASSWORD_PATTERN =
            Pattern.compile(PASSWORD_REGEX);
	
	
	public SissegAuthenticationProvider getSissegAuthenticationProvider() {
		if(sissegAuthenticationProvider==null) {
			ClienteSissegConfig clienteSissegConfig=new ClienteSissegConfig();
			clienteSissegConfig.setProperty(ClienteSissegConfigParams.APPLICATION_ID,env.getProperty("sisseg.application-id") );
			clienteSissegConfig.setProperty(ClienteSissegConfigParams.BASE_URL, env.getProperty("sisseg.base-url"));
			clienteSissegConfig.setProperty(ClienteSissegConfigParams.ENCRYPTION_KEY, env.getProperty("sisseg.encryption-key"));
			sissegAuthenticationProvider=new SissegAuthenticationProvider(clienteSissegConfig);
		}
		return sissegAuthenticationProvider;
	} 
//	@Autowired
//	private FuncionarioDao funcionarioDao;
//	
//	@Autowired
//	private SedeService sedeService; 
	
	@Override
	public Usuario obtener(String username) {
		return usuarioDao.obtener(username);
	}
	
	@Override
	public Usuario buscarUsuario(String username) {
//		UsernameDTO usernameDTO = parseUsername(username);
		String[] tipos=username.split("_");
		Usuario usuario =null;
		if(tipos.length>1) {
			usuario = usuarioDao.obtenerRUC(tipos[1]);			
		}else {
			usuario = usuarioDao.obtener(username);
		}
		
//		if(StringUtils.isNotBlank(usernameDTO.getCodigoSede())) {
//			usuario = null;// usuarioDao.findUsuarioExterno(usernameDTO.getCodigoSede());
//			usuario.setIdPerfil(USUARIO_EXTERNO);
//			usuario.setNombreSesion(usuario.getSede().getCodigo() + " - " + usuario.getSede().getNombre());
//			usuario.setIdSede(usuario.getSede().getIdSede());
			//if(usuario.getSede().getEstado() != null) {
			//	usuario.setEstadoSede(usuario.getSede().getEstado().getCodigo());			
			//}
//		} else {
//			UsernameDTO respuesta = funcionarioDao.obtenerUsuario(usernameDTO.getUsuario());
//			usuario=new Usuario();
//			usuario.setIdUsuario(respuesta.getIdUsuario());
//			usuario.setIdPerfil(respuesta.getIdPerfil());
//			usuario.setNombreSesion(respuesta.getNombreCompleto());
//		}
		return usuario;
	}
	
	private UsernameDTO parseUsername(String username) {
		try {
			return new ObjectMapper().readValue(username, UsernameDTO.class);
		}catch (Exception e) {
			logger.info(username);
			logger.error(e.getMessage());
			throw new ValidacionException(Constantes.CODIGO_MENSAJE.AUTENTICACION_PROBLEMAS_AUTENTICACION);
		}
		
	}

	@Transactional(rollbackFor = Exception.class,propagation = Propagation.REQUIRED)
	public Usuario validarUsuario(String username, String password) {
		UsernameDTO usernameDTO = parseUsername(username);
		Usuario usuario=null;
		if(StringUtils.isNotBlank(usernameDTO.getRuc())) {
			usuario=usuarioDao.obtenerxDocumento(usernameDTO.getIdTipoDocumento(), usernameDTO.getRuc());			
		}else if(StringUtils.isNotBlank(usernameDTO.getToken())) {
			Rol rol=null;
			UsuarioBeanDTO usuarioBeanDTO=null;
			String usuarioStr=null;
			
			try {
				usuarioBeanDTO=SecureCrypto.getUsuarioBean(KEY_CRYPT,usernameDTO.getToken().replaceAll(" ", "+"));
				usuarioStr=usuarioBeanDTO.getLogin();			// JOSELUIS	
			}catch (Exception e) {}
			
			if(usuarioStr==null) {
				String cadenaEncriptada =usernameDTO.getToken().replaceAll(" ", "+");
				String produccion=env.getProperty("modo-produccion");
//				if("1".equals(produccion)){
					Authentication authentication=getSissegAuthenticationProvider().authenticate(new SissegAuthenticationToken(env.getProperty("sisseg.encryption-key") + "::" + env.getProperty("sisseg.application-id") + "::" + cadenaEncriptada, cadenaEncriptada));
					usuarioStr=(String)authentication.getPrincipal();
//				}else {
//					usuarioStr=getUsuarioInterno(cadenaEncriptada);
//				}
			}
			
			boolean esExtrerno = usuarioBeanDTO!=null && usuarioBeanDTO.getRuc()!=null && !"".equals(usuarioBeanDTO.getRuc());
			if(esExtrerno) {
				usuario= usuarioDao.obtenerRUC(usuarioBeanDTO.getRuc());
			}else {
				usuario= usuarioDao.obtener(usuarioStr);
				if(usuario.getCodigoUsuarioInterno()==null){
					throw new ValidacionException(Constantes.CODIGO_MENSAJE.AUTENTICACION_CONFIGURE_ID_USUARIO_SIGED);
				}
			}
			
			if(usuario==null) {
				if(esExtrerno) {
					rol=rolService.obtenerCodigo(Constantes.ROLES.USUARIO_EXTERNO);
				}else {
					throw new ValidacionException(Constantes.CODIGO_MENSAJE.AUTENTICACION_FUNCIONARIO_NO_EXISTE);
				}				
				usuario=new Usuario();
				usuario.setCodigoRuc(usuarioBeanDTO.getRuc());
				usuario.setUsuario(usuarioBeanDTO.getLogin());
				usuario.setNombreUsuario(usuarioBeanDTO.getRazonSocial());
				if(usuario.isPesonaJuridica()) {
					usuario.setTipoPersona(listadoDetalleService.obtenerListadoDetalle(Constantes.LISTADO.TIPO_PERSONA.CODIGO, Constantes.LISTADO.TIPO_PERSONA.JURIDICA));	
				}else {
					usuario.setTipoPersona(listadoDetalleService.obtenerListadoDetalle(Constantes.LISTADO.TIPO_PERSONA.CODIGO, Constantes.LISTADO.TIPO_PERSONA.NATURAL));
				}
				usuario.setPais(listadoDetalleService.obtenerListadoDetalle(Constantes.LISTADO.PAISES.CODIGO, Constantes.LISTADO.PAISES.PERU));
				AuditoriaUtil.setAuditoriaRegistro(usuario,AuditoriaUtil.getContextoJob());
				usuario=usuarioDao.save(usuario);
				
				UsuarioRol usuarioRol=new UsuarioRol();
				usuarioRol.setUsuario(usuario);
				usuarioRol.setRol(rol);
				usuarioRolService.guardar(usuarioRol, AuditoriaUtil.getContextoJob());
				usuario.setContrasenia(codificar("12345"));
				bitacoraService.logeoUsuario(usuario, AuditoriaUtil.getContextoJob());
				return usuario;
			}else {
				
				usuario.setContrasenia(codificar("12345"));
				bitacoraService.logeoUsuario(usuario, AuditoriaUtil.getContextoJob());
			}
			
		}
		return  usuario;
		
	
	}
	
	
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		Usuario usuario = buscarUsuario(username);

		if (usuario == null) {
			throw new ValidacionException(Constantes.CODIGO_MENSAJE.AUTENTICACION_USUARIO_NO_EXISTE);
		}

		List<GrantedAuthority> autorities = new ArrayList<GrantedAuthority>();
		/*
		 * usuario.getRols().stream() .map(rol -> new
		 * SimpleGrantedAuthority(rol.getNombre())) .collect(Collectors.toList());
		 */

		String contrasenia = usuario.getContrasenia();
		
		if(StringUtils.isBlank(usuario.getContrasenia())) {
			contrasenia = "0";
		}
		
		return new User(username, contrasenia, true, true, true, true, autorities);
	}

	@Override
	public UserDetails loadUserByUsername(String username, String credentials) {
		Usuario usuario = validarUsuario(username, credentials);
		logger.info("usuario: " + username + ", credentials:" + credentials);
		
		if (usuario == null) {
			throw new ValidacionException(Constantes.CODIGO_MENSAJE.AUTENTICACION_USUARIO_NO_EXISTE);
		}

		List<GrantedAuthority> autorities = new ArrayList<GrantedAuthority>();
		/*
		 * usuario.getRols().stream() .map(rol -> new
		 * SimpleGrantedAuthority(rol.getNombre())) .collect(Collectors.toList());
		 */
//		boolean usuarioActivo = Constantes.ESTADO_CONFIRMACION.VERIFICADO.equals(usuario.getConfirmacion().getCodigoCodificador());
		boolean usuarioActivo = true;
		if (!usuarioActivo) {
			throw new ValidacionException(Constantes.CODIGO_MENSAJE.AUTENTICACION_CUENTA_NO_CONFIRMADA);
		};
		logger.info("USER: " +usuario.getUsuario());
		logger.info("PASSWORD: " +usuario.getContrasenia());
		boolean esExtrerno = usuario!=null && usuario.getCodigoRuc()!=null && !"".equals(usuario.getCodigoRuc());
		if(esExtrerno) {
			return new User(usuario.getCodigoTipo()+"_"+usuario.getCodigoRuc(), usuario.getContrasenia(), usuarioActivo, true, true, true, autorities);
		}else {
			return  new User(usuario.getUsuario(), usuario.getContrasenia(), usuarioActivo, true, true, true, autorities);
		}
		 
	}
	
	
	private String getUsuarioInterno(String token) {
		System.out.println(token);
		String usuariosInternos[][]= 
		{
			{"ksilvap","ksilvap",
			"fuARzUzp8xG3lgf5ZwXxJdYem7YGJtpVyNMCa/r/1jMFvWBdmH7E/MAi87FqfS2Gp2j3+p8PJciaWN5Bpk1/FCzkf8KBy9LZk40R2u9n7N6w8EN1aWJ39lYYvvF6rtYDBEM8duXAgE6VRpE9C0qVXi/2QQ+btvRkFwCjU4Dykxo="},
			
			{"rzegarra","rzegarra",
			"6joTjlStnSLBNBWze/2GK138J38WZ+AKzfv51GHNuyMNgowXSRdhfmrwhNoPwB2csN4BARmk0no1CyJxC463V8PBdyjbujkKMcTWQ4HRgI7NbdDyYQvzfWcp2kIPEEDbp3mMlZzqpzTzVvf2m4xYYm8IA2HRa6DyB073lnnzpDpvp/zOOAd8Xuhyp2wxySk5"},
			
			{"jurcia","jurcia",
				"xnMXR4naxvz2fZT9SMLlRh8m6rFXnmQVVt7nnySeAzCYPcPQ2yEsc4aId086125ErZNvSOIwp0ZLBY7y9HGOaaVbtk6cww7+slbBOJgLjMCaURsqosnhWKOdL4oxfPR+9jiCBA4ayBlzLDItJwCzmvbDjjz57ybvlx0g8XFgfGQ="},
			{"EFIELD","EFIELD","NEbs3MYOAEWJmSf3V8IOfAvzUi4JPwRutSgvwBUQkB4WMBBYkSSs9+kk6p5U9/dPYT2MTQ6Rfl99nD601UsaY6Vbtk6cww7+slbBOJgLjMCaURsqosnhWKOdL4oxfPR+9Xds6Kj8d+jmwexEMD8WB/bDjjz57ybvlx0g8XFgfGQ="},
			{"RVERAC","RVERAC","P7DPENzlY/TtfrnvZq7vuZRQHoX3DQCz1W+8rs01QhxyjBf4HJkQoS16A07EatNm0zcGjoYvkDJwMTta5HEG5aVbtk6cww7+slbBOJgLjMCaURsqosnhWKOdL4oxfPR+hmFQv3E8iAFsMAZPDCxU1vbDjjz57ybvlx0g8XFgfGQ="},
			{"AOLIVERA","AOLIVERA","P7DPENzlY/TtfrnvZq7vuZRQHoX3DQCz1W+8rs01QhxyjBf4HJkQoS16A07EatNm0zcGjoYvkDJwMTta5HEG5aVbtk6cww7+slbBOJgLjMCaURsqosnhWKOdL4oxfPR+hmFQv3E8iAFsMAZPDCxU1vbDjjz57ybvlx0g8XFgfGQ=2"},
			{"AOYOLA","AOYOLA","P7DPENzlY/TtfrnvZq7vuZRQHoX3DQCz1W+8rs01QhxyjBf4HJkQoS16A07EatNm0zcGjoYvkDJwMTta5HEG5aVbtk6cww7+slbBOJgLjMCaURsqosnhWKOdL4oxfPR+hmFQv3E8iAFsMAZPDCxU1vbDjjz57ybvlx0g8XFgfGQ=3"},
			{"JVASQUEZG","JVASQUEZG","43ZbRa/R7YztgmDLfOaPQp6FrXMsCTEdJQCSaIZYQ7tgsuOtFG43/MQq3l5T4fYcFBZp4w0wde3PV1ZHGgFt1opiTLJm/IMN7Zfq4zg2Ox0C3fqelr5RQFGlMJ+20hl3XZLnrL5ixuqier5dpTkcpX5nlT35CYsbnObjUpjoyDNzcvJ4UHLLcOUZXmrj8Q0g"},
		};
		for(int i=0;i<usuariosInternos.length;i++) {
			if(usuariosInternos[i][2].equals(token)) {
				return usuariosInternos[i][1];
			}
		}
		return null;
	}

	@Override
	public List<UsernameDTO> listarEvaluadores() {
		return null;//funcionarioDao.listarUsuarios(USUARIO_EVALUADOR);
	}

	@Override
	public UsernameDTO obtenerPerfil(Contexto contexto) {
		UsernameDTO usernameDTO=null;
		Usuario usuario = null;//usuarioDao.obtener(contexto.getUsuario().getIdUsuario());
		if(usuario!=null) {
			usernameDTO=new UsernameDTO(usuario);
			//usernameDTO.setSede(sedeService.obtener(usuario.getSede().getIdSede()));
//			usernameDTO.setIdPerfil(USUARIO_EXTERNO);
		}
		if(usuario==null) {
//			usernameDTO = funcionarioDao.obtenerUsuario(contexto.getUsuario().getIdUsuario());	
		}		
		return usernameDTO;
	}
	
	public List<PerfilDTO> obtenerPerfiles() {
		return null;//funcionarioDao.obtenerPerfiles();
	}

	public List<UsernameDTO> listarUsuarios(Long idPerfil) {		
		List<UsernameDTO> usuariosSalida=new ArrayList<UsernameDTO>();
		List<UsernameDTO> usuarios=null;//funcionarioDao.listarUsuarios(idPerfil);
		for(UsernameDTO usernameDTO:usuarios) {
//			if(!(USUARIO_COORDINADOR.equals(usernameDTO.getIdPerfil())
//					&&USUARIO_EXTERNO.equals(usernameDTO.getIdPerfil()))) {
//				usuariosSalida.add(usernameDTO);	
//			}
		}
		return usuariosSalida;
	}
	
	public List<OpcionDTO> obtenerOpcion(Long idPerfil){
		return null;//funcionarioDao.obtenerOpcion(idPerfil);
	}

	@Override
	public Usuario obtenerUsuario(Contexto contexto) {
		Usuario usuario=usuarioDao.obtener(contexto.getUsuario().getIdUsuario());
		if(usuario.getTipoDocumento() == null) {
			if(StringUtils.length(usuario.getCodigoRuc()) == 11) {
				usuario.setTipoDocumento(listadoDetalleService.obtenerListadoDetalle(Constantes.LISTADO.TIPO_DOCUMENTO.CODIGO, Constantes.LISTADO.TIPO_DOCUMENTO.RUC));
			}else if(StringUtils.length(usuario.getCodigoRuc()) == 8){
				usuario.setTipoDocumento(listadoDetalleService.obtenerListadoDetalle(Constantes.LISTADO.TIPO_DOCUMENTO.CODIGO, Constantes.LISTADO.TIPO_DOCUMENTO.DNI));
			}else {
				usuario.setTipoDocumento(listadoDetalleService.obtenerListadoDetalle(Constantes.LISTADO.TIPO_DOCUMENTO.CODIGO, Constantes.LISTADO.TIPO_DOCUMENTO.CARNET_EXTRA));
			}
		}
		usuario.setFechaInicioSesion(DateUtil.getDate(new Date(), "dd/MM/yyyy hh:mm"));
		List<Rol> listRol = rolService.buscarRolUsuario(usuario.getIdUsuario());
		usuario.setRoles(listRol);
		
		List<Opcion> opciones = opcionService.opcionesRoles(usuario.getRoles(),contexto);
		usuario.setOpciones(ordenarOpciones(opciones,usuario));
		usuario.setNumeroDocumento(usuario.getCodigoRuc());
		return usuario;
	}
	
	public static Map ordenarOpciones(final List<Opcion> opciones,Usuario usuario) {
		Map<String, List<Opcion>> map = new HashMap<String, List<Opcion>>();
		List<Opcion> list;
		String codigoPadre;
		for (Opcion opcion : opciones) {
			if (opcion.getPadre() == null) {
				codigoPadre = "ROOT";
			} else {
				codigoPadre = opcion.getPadre().getCodigo();
			}

			if (map.containsKey(codigoPadre)) {
				list = map.get(codigoPadre);
			} else {
				list = new ArrayList<Opcion>();
				map.put(codigoPadre, list);
				
			}

			if(usuario.getTipoPersona()!=null &&Constantes.LISTADO.TIPO_PERSONA.JURIDICA.equals(usuario.getTipoPersona().getCodigo())) {
				if(!opcion.getCodigo().equals(Constantes.OPCIONES_EXTERNO.BANDEJA_INVITACIONES)) {
					list.add(opcion);
				}
			}else {
				list.add(opcion);
			}
			
		}

	
		return map;
	}
	
	

	
	private String generarToken(ListadoDetalle estadoPendiente,ListadoDetalle tipo,Long idUsuario) {
		Token token=new Token();
		token.setEstado(estadoPendiente);
		String digito1 = ((int) (Math.random()*10))+"";
		String digito2 = ((int) (Math.random()*10))+"";
		String digito3 = ((int) (Math.random()*10))+"";
		String digito4 = ((int) (Math.random()*10))+"";
		String digito5 = ((int) (Math.random()*10))+"";
		String digito6 = ((int) (Math.random()*10))+"";
		String codigToken=digito1+digito2+digito3+digito4+digito5+digito6;
		token.setCodigo(codigToken);
		token.setTipo(tipo);
		token.setIdUsuario(idUsuario);
		AuditoriaUtil.setAuditoriaRegistro(token,AuditoriaUtil.getContextoJob());
		tokenService.guardar(token,AuditoriaUtil.getContextoJob());
		logger.info("token generado:"+token);
		return codigToken;
	}
	
	@Override
	public void enviarCodigo(String correo,String codigoTipo,Contexto contexto) {
		if (correo == null) {
			throw new ValidacionException(Constantes.CODIGO_MENSAJE.MENSAJE_VALIDACION_CORREO,correo);
		}
		ListadoDetalle tipo=null;
		ListadoDetalle pendiente = listadoDetalleDao.obtenerListadoDetalle(Constantes.LISTADO.ESTADO_NOTIFICACIONES.CODIGO, 
				Constantes.LISTADO.ESTADO_NOTIFICACIONES.PENDIENTE);
		Notificacion notificacion = new Notificacion();
		notificacion.setAsunto("Validación de Correo Electrónico");
		if(codigoTipo!=null) {
			 tipo = listadoDetalleDao.obtenerListadoDetalle(Constantes.LISTADO.TIPO_TOKEN.CODIGO,Constantes.LISTADO.TIPO_TOKEN.CONTRASENIA);
		}else {
			 tipo = listadoDetalleDao.obtenerListadoDetalle(Constantes.LISTADO.TIPO_TOKEN.CODIGO,Constantes.LISTADO.TIPO_TOKEN.VERIFICACION);
		}
		Long idUsuario=null;
		if(contexto.getUsuario()!=null) {
			idUsuario=contexto.getUsuario().getIdUsuario();
		}
		String token=generarToken(pendiente,tipo,idUsuario);
		notificacion.setMensaje(token);
		AuditoriaUtil.setAuditoriaRegistro(notificacion,AuditoriaUtil.getContextoJob());		
		notificacion.setCorreo(correo);
		notificacion.setEstado(pendiente);
		notificacionService.enviarMensajeCorreoValidacion13(notificacion, contexto);
		
	}

	@Override
	public Token validarCodigo(Token token) {
		Token tokenBD = tokenDao.obtenerToken(token.getCodigo());
		if (tokenBD == null) {
			throw new ValidacionException(Constantes.CODIGO_MENSAJE.TOKEN_NO_EXISTE);
		}
		if (tokenBD.getEstado().getCodigo().equals(Constantes.LISTADO.ESTADO_TOKEN.USADO)) {
			throw new ValidacionException(Constantes.CODIGO_MENSAJE.TOKEN_NO_VALIDO);
		}
		ListadoDetalle estadoUsado = listadoDetalleDao.obtenerListadoDetalle(Constantes.LISTADO.ESTADO_TOKEN.CODIGO,
				Constantes.LISTADO.ESTADO_TOKEN.USADO);
		tokenBD.setEstado(estadoUsado);
		tokenDao.save(tokenBD);
		return tokenBD;
	}

	@Override
	public Page<Usuario> listarUsuarioPerfil(String codigoRol,Pageable pageable, Contexto contexto) {
		return usuarioDao.listarUsuarioPerfil(codigoRol,pageable);
	}
	
	@Override
	public Page<Usuario> listarUsuarioPerfil(String codigoRol,String uuidSolicitud,Long idPerfil,Pageable pageable, Contexto contexto) {
		Long[] codigo = new Long[] {-1L};
		Long[] codigoPerfil = new Long[] {idPerfil};
		
		if (idPerfil.equals(0L)) {
			codigoPerfil = usuarioDao.obtenerCodigoPeril(uuidSolicitud);
		}
		
		if(codigoPerfil==null||codigoPerfil.length==0) {
			codigoPerfil=codigo;
		}
		
		Long[] codigoSector=usuarioDao.obtenerCodigoSector(uuidSolicitud);
		
		if(codigoSector==null||codigoSector.length==0) {
			codigoSector=codigo;
		}
		
		return usuarioDao.listarUsuarioPerfil(codigoRol,Arrays.asList(codigoPerfil),Arrays.asList(codigoSector),pageable);
	}
	
	
	@Override
	public List<ResponseUserListDto.Usuario> listarUsuariosSiged() throws Exception {
		return sigedApiConsumer.listarUsuariosSiged();
	}
	
	@Override
	public ResponseUsuarioSigedDTO obtenerUsuarioSiged(Long idUsuario) throws Exception {
		return sigedApiConsumer.obtenerUsuarioSiged(idUsuario);
	}
	
	@Override
	public Page<Usuario> buscar(String nombreUsuario, Pageable pageable) {
		
		Page<Usuario> pageUsuario = usuarioDao.buscar(nombreUsuario,pageable);
		
		List<Usuario> listaUsuarios = pageUsuario.getContent();
		
		for (Usuario usuario : listaUsuarios) {
			usuario.setRoles(rolDao.buscarRolUsuario(usuario.getIdUsuario()));
		}
		
		return pageUsuario;
	}
	
	@Override
	public Usuario registrarUsuario(Usuario usuario,Contexto contexto) {
		
		AuditoriaUtil.setAuditoriaRegistro(usuario,contexto);
		return usuarioDao.save(usuario);
	}
	
	@Override
	public Usuario modificarUsuario(Usuario usuario,Contexto contexto) {
		
		
		Usuario usu = new Usuario();
		if (usuario.getIdUsuario()!=null) {
			usu = usuarioDao.obtener(usuario.getIdUsuario());
		}
		
		AuditoriaUtil.setAuditoriaActualizacion(usu, contexto);
		usu.setNombreUsuario(usuario.getNombreUsuario());
		usu.setCorreo(usuario.getCorreo());
		return usuarioDao.save(usu);
	}
	
	@Override
	public void actualizarEstadoUsuario(Usuario usuario,Contexto contexto) {
		 AuditoriaUtil.setAuditoriaRegistro(usuario,contexto);
		 usuarioDao.actualizarEstadoUsuario(usuario.getIdUsuario(),usuario.getEstadoUsuario(),usuario.getUsuCreacion(),usuario.getIpCreacion());
	}
	
	@Override
	public Usuario listarUsuario(Long idUsuario) {
		return usuarioDao.obtener(idUsuario);
	}
	
	@Override
	public Page<UsuarioRol> listarUsuarioRol(Long idUsuario, Pageable pageable) {
		return usuarioDao.listarRolUsuario(idUsuario,pageable);
	}
	
	@Override
	public Page<Rol> listarRoles(String nombre, Pageable pageable) {
		return rolDao.buscar(nombre,pageable);
	}
	
	@Override
	public List<Usuario> obtenerUsuariosPorDivision(Long idPerfil) {
		return usuarioEvaluacionDao.obtenerUsuariosEvaluadores(idPerfil);
	}
	
	@Override
	public ReasignacionDTO registrarUsuarioReasignacion(ReasignacionDTO dto,Contexto contexto) {
		
		Date fechaInicio = Date.from(dto.getFechaInicio().atStartOfDay(ZoneId.systemDefault()).toInstant());
		Date fechaFin = Date.from(dto.getFechaFin().atStartOfDay(ZoneId.systemDefault()).toInstant());
		
		UsuarioReasignacion usuarioReasignacion = new UsuarioReasignacion();
		usuarioReasignacion.setIdUsuario(dto.getIdUsuarioReasignacion());
		usuarioReasignacion.setIdConfiguracionBandeja(dto.getIdConfiguracionBandeja());
		usuarioReasignacion.setFechaInicio(fechaInicio);
		usuarioReasignacion.setFechaFin(fechaFin);
		usuarioReasignacion.setEstadoUsuarioReasignacion(dto.getEstadoUsuarioReasignacion());
		
		AuditoriaUtil.setAuditoriaRegistro(usuarioReasignacion,contexto);
		
		usuarioReasignacionDao.save(usuarioReasignacion);
		
		if (dto.getIdUsuarioReasignado()!=null) {
			
			List<Asignacion> listaAsignacion = usuarioEvaluacionDao.obtenerAsignacionesPorIdUsuario(dto.getIdUsuarioReasignado());
			for (Asignacion asignacion : listaAsignacion) {
				asignacionDao.actualizarUsuario(asignacion.getIdAsignacion(), dto.getIdUsuarioReasignacion(),dto.getIdUsuarioReasignado());
			}
		}
		
		return dto;
	}
	
	@Override
	public UsuarioRolConfiguracion registrarUsuarioRolConfiguracion(UsuarioRolConfiguracion usuarioRolConfiguracion,Contexto contexto) {
		return usuarioRolService.registrarUsuarioRolConfiguracion(usuarioRolConfiguracion, contexto);
	}
	
	@Override
	public void actualizarEstadoUsuarioRolConf(UsuarioRolConfiguracion usuarioRolConfiguracion,Contexto contexto) {
		usuarioRolService.actualizarEstadoUsuarioRolConf(usuarioRolConfiguracion, contexto);
	}
	
	 public static void main(String[] args) {
		    
			
		 if (PASSWORD_PATTERN.matcher("a1Bd6.").matches()) {
			 System.out.println("password ok");
	    }else {
	    	 System.out.println("password incorrecto");
	    	
	    }
	}
	
	@Transactional(rollbackFor = Exception.class,propagation = Propagation.REQUIRED)
	public Usuario guardar(Usuario usuario, Contexto contexto) {
		Usuario usuarioBD=usuarioDao.obtenerxDocumento(usuario.getTipoDocumento().getIdListadoDetalle(), usuario.getCodigoRuc());
		if(usuarioBD!=null) {
			throw new ValidacionException(Constantes.CODIGO_MENSAJE.USUARIO_EXISTENTE);
		}
		usuario.setNombreUsuario(usuario.getRazonSocial());
		usuario.setTipoPersona(listadoDetalleService.obtenerListadoDetalle(Constantes.LISTADO.TIPO_PERSONA.CODIGO, Constantes.LISTADO.TIPO_PERSONA.EXTRANJERO));	
		usuario.setUsuario(usuario.getRazonSocial());
		if (!PASSWORD_PATTERN.matcher(usuario.getContrasenia()).matches()) {
            throw new ValidacionException(Constantes.CODIGO_MENSAJE.CONTRASENIA_CORTA);
        }
		
		usuario.setContrasenia(codificar(usuario.getContrasenia()));
		AuditoriaUtil.setAuditoriaRegistro(usuario, contexto);
		usuarioBD =usuarioDao.save(usuario);
		Rol rol =rolService.obtenerCodigo(Constantes.ROLES.USUARIO_EXTERNO);
		UsuarioRol usuarioRol=new UsuarioRol();
		logger.info("USUARIO"+usuarioBD);
		usuarioRol.setUsuario(usuarioBD);
		usuarioRol.setRol(rol);
		usuarioRolService.guardar(usuarioRol, contexto);
		return usuarioBD ;
	}

	@Override
	public Usuario obtenerUsuario(Long idPais, Long idTipoDocumento, String nroDocumento, Contexto contextoAnonimo) {
		Usuario usuarioBD=usuarioDao.obtenerxDocumento(idTipoDocumento, nroDocumento);
		usuarioBD.setCorreo(hideSomeOfEmailValue(usuarioBD.getCorreo()));
		return usuarioBD;
	}
	
	public static String hideSomeOfEmailValue(String privateEmail) {
		StringBuilder stringBuilder = new StringBuilder(privateEmail);
		int atSignIndex = privateEmail.indexOf("@");
		String emailName = privateEmail.substring(0, atSignIndex);

		if (emailName.length() == 1) {
		    return stringBuilder.replace(0, emailName.length(), "*").toString();
		}
		if (emailName.length() > 1 && emailName.length() < 4) {
		    return stringBuilder.replace(1, atSignIndex, StringUtils.repeat("*", emailName.length() - 1)).toString();
		} else {
		    stringBuilder = new StringBuilder(privateEmail.substring(0, 2));
		    String emailProvider = privateEmail.substring(atSignIndex);
		    stringBuilder.append("****").append(emailProvider);
		    return stringBuilder.toString();
		}
	}

	@Transactional(rollbackFor = Exception.class)
	public void recuperarContrasenia(Usuario usuario, Contexto contextoAnonimo) {
		Usuario usuarioBD=usuarioDao.obtenerxDocumento(usuario.getTipoDocumento().getIdListadoDetalle(), usuario.getCodigoRuc());
		if (usuarioBD == null) {
			throw new ValidacionException(Constantes.CODIGO_MENSAJE.USUARIO_NO_EXISTE,usuario.getCorreo());
		}
		contextoAnonimo.setUsuario(usuarioBD);
		enviarCodigo(usuarioBD.getCorreo(), Constantes.LISTADO.TIPO_TOKEN.RECUPERAR_CONTRASENIA, contextoAnonimo);
	}
	
	@Transactional(rollbackFor = Exception.class)
	public Usuario cambiarContrasenia(Usuario usuario) {
		Token tokenBD = tokenDao.obtenerToken(usuario.getCodigoToken());
		if (tokenBD == null) {
			throw new ValidacionException(Constantes.CODIGO_MENSAJE.TOKEN_NO_EXISTE);
		}

		if (!usuario.getContrasenia().equals(usuario.getConfirmarContrasenia())) {
			throw new ValidacionException(Constantes.CODIGO_MENSAJE.USUARIO_PASSWORD_DIFERENTE);
		}
		Usuario usuarioBD = usuarioDao.obtener(tokenBD.getIdUsuario());
		usuarioBD.setContrasenia(codificar(usuario.getContrasenia()));
		usuarioDao.save(usuarioBD);
		return usuarioBD;
	}
	
	public String codificar(String contrasenia) {
		return new BCryptPasswordEncoder().encode(contrasenia);
	}

	@Override
	public Usuario obtener(Long idUsuario) {
		Usuario usuario=usuarioDao.obtener(idUsuario);
		
		return usuario;
	}
}
